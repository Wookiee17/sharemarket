import React, { useCallback, useMemo, useRef } from "react";
import Head from "next/head";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-enterprise";
import moment from "moment";
import Link from "next/link";
import { AiOutlineFolderAdd } from "react-icons/ai";

// layout
import Layout from "../../common/layouts/Layout";

//graphql
import { useLazyQuery, useQuery } from "@apollo/client";
import {
  GET_STOCK_NEWS_DISTINCT_DATE,
  GET_STOCK_NEWS,
} from "../../gql/queries";
import dayjs from "dayjs";

const HTest = () => {
  const gridRef = useRef(null);
  const containerStyle = useMemo(() => ({ width: "100%", height: "100%" }), []);
  const gridStyle = useMemo(() => ({ height: "100%", width: "100%" }), []);

  // Distinct Stock News Dates
  const { loading: ndateLoading, fetchMore: fetchStockNewsDatesData } =
    useQuery(GET_STOCK_NEWS_DISTINCT_DATE, {
      variables: {
        // date: "desc",
        // limit: 50,
        // offset: 0,
      },
      onCompleted: (res) => {
        gridRef.current.api.onFilterChanged();
        gridRef.current.api.onSortChanged();
      },
    });

  // Distinct Stock News Dates
  const [loadNews, { called, loading }] = useLazyQuery(GET_STOCK_NEWS);

  const defaultColDef = {
    wrapText: false,
    autoHeight: true,
    resizable: true,
    wrapHeaderText: true,
    autoHeaderHeight: true,
    flex: 1,
  };

  const tableHeader = [
    {
      headerName: "Headlines",
      field: "headlines",
      cellRenderer: ({ data }) => {
        return (
          <div style={{ display: "flex", alignItems: "center" }}>
            <div className={`icon`}>
              <AiOutlineFolderAdd style={{ fontSize: "1.2rem" }} />
            </div>
            <div className="list" style={{ marginLeft: 10 }}>
              {data?.company?.name && (
                <Link href="#">{data?.company?.name}:</Link>
              )}
              {data?.headlines}
              <span style={{ color: "#758696", marginLeft: "0.5rem" }}>
                {moment(data?.news_date).format("HH:mm A")}
              </span>
            </div>
          </div>
        );
      },
    },
  ];

  // Grid Ready
  const onGridReady = useCallback((params) => {
    const dataSource = {
      getRows: (params) => {
        if (params.request.groupKeys.length === 0) {
          fetchStockNewsDatesData({
            variables: {
              date: "desc",
              limit: 50,
              offset: params?.request?.startRow || params?.startRow,
            },
          }).then((r) => {
            let lastRow = -1;
            const total = r?.data?.count?.aggregate?.count;

            if ((params?.request?.endRow || params?.endRow) >= total) {
              lastRow = total;
            }

            const rowData = r?.data?.news_dates?.map((d) => ({
              group: true,
              ...d,
            }));
            // params.successCallback(r?.data?.news_dates, lastRow);
            params.success({ rowData, rowCount: lastRow });
          });
        } else {
          var key = params.request.groupKeys[0];

          loadNews({
            variables: {
              where: {
                // _and: [
                //   {
                //     date: { _eq: moment(key).format("YYYY-MM-DD") },
                //   },
                //   {
                //     news_classification: { _eq: "news" },
                //   },
                // ],
                date: { _eq: moment(key).format("YYYY-MM-DD") },
                news_classification: { _eq: "news" },
              },
              order_by: { news_date: "desc" },
            },
          }).then((res) => {
            const rowData = res.data?.news;
            params.success({ rowData, rowCount: rowData?.length });
          });
        }
      },
    };
    gridRef.current = params;
    params.api.setServerSideDatasource(dataSource);
  }, []);

  const isServerSideGroup = useCallback((dataItem) => {
    // indicate if node is a group
    return dataItem.group;
  }, []);

  const getServerSideGroupKey = useCallback((dataItem) => {
    // specify which group key to use
    return dayjs(dataItem.date).format("ddd DD MMM YYYY");
  }, []);

  // const autoGroupColumnDef = useMemo(() => {
  //     return {
  //       cellRendererSelector: (params) => {
  //         console.log('YYY ::: ', params)
  //         return 'Test'
  //       }
  //     };
  // }, []);

  return (
    <Layout>
      <Head>
        <title>Test | IC Trading</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={containerStyle}>
        <div
          style={gridStyle}
          className="StockIndicesNewsTable ag-theme-alpine-dark"
        >
          <AgGridReact
            ref={gridRef}
            onGridReady={onGridReady}
            columnDefs={tableHeader}
            rowModelType="serverSide"
            defaultColDef={defaultColDef}
            cacheBlockSize={50}
            className="system_update_ag"
            rowClass="row"
            serverSideInfiniteScroll
            onRowClicked={(e) => {}}
            tooltipShowDelay={0}
            tooltipHideDelay={3000}
            showLoadingOverlay={ndateLoading}
            isServerSideGroup={isServerSideGroup}
            getServerSideGroupKey={getServerSideGroupKey}
            // autoGroupColumnDef={autoGroupColumnDef}
            treeData={true}
            groupDisplayType={"groupRows"}
          />
        </div>
      </div>
      {/* </div> */}
    </Layout>
  );
};

export default HTest;
