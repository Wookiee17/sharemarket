import React, { useState, useEffect } from "react";
import Head from "next/head";

// layout
import Layout from "../../../common/layouts/Layout";

// redux
import { useSelector } from "react-redux";

//graphql
import { useQuery } from "@apollo/client";
import { GET_WEBINARS } from "../../../gql/queries";
// component
import Search from "../../../common/component/search/Search";
import WebinarListingCard from "../../../common/component/webinars/WebinarListingCard";
import WebinarTabs from "../../../common/component/webinars/WebinarTabs";
import WebinarDetails from "../../../common/component/webinars/WebinarDetails";

const Help = () => {
  const theme = useSelector((state) => state.Common.theme);
  const [selectedWebinar, setSelectedWebinar] = useState(null)
  const [webinars, setWebinars] = useState([])
  const [searchText, setSearchText] = useState("")
  const [searchQuery, setSearchQuery] = useState(null)
  const activeTab = useSelector((state) => state.Webinar.activeWebinarTab);

  useQuery(GET_WEBINARS, {
    variables: {
      where: {
        active: {_eq: true},
        category: activeTab === 0 ? undefined : {
          category: {
            _eq: activeTab === 1 ? "Market Mornings" : "Technical Talks"
          }
        },
        ...searchQuery
        // title: { _ilike: `%${searchText}%`}
      }
    },
    onCompleted: (data) => {
      if(Array.isArray(data?.webinars)){
        setWebinars(data.webinars)
        if(data?.webinars?.length){
          setSelectedWebinar(data.webinars[0])
        }else{
          setSelectedWebinar(null)
        }
      }
    }
  })
  
  useEffect(()=> {
    if(webinars.length){
      setSelectedWebinar(webinars[0])
    }
  }, [activeTab, webinars])

  useEffect(() => {
    const timeout = setTimeout(() => {
      if(searchText.length >= 3){
        setSearchQuery({
          _or: [{
            title: { _ilike: `%${searchText}%`}
          },{
            analyst: { name: {_ilike: `%${searchText}%`}}
          }]
        })
      }else{
        setSearchQuery(null)
      }
    }, 1000);
    return () => clearTimeout(timeout);
  }, [searchText]);

  return (
    <Layout>
      <div className={`tabs-body ${theme}`}>
        <Head>
          <title>Webinar | IC Trading</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className={`webinar ${theme}`}>
          <div className="webinar-left">
            <WebinarTabs />
            <div className="webinar-left_search">
              <Search
                placeholderText="Enter keyword"
                onChange={(e) => setSearchText(e.target.value)}
              />
            </div>
            <div className="webinar-left_inner">
              {webinars.map(
                (item, i) => (
                  <WebinarListingCard 
                    key={i}
                    webinar={item}
                    onClick={()=> setSelectedWebinar(item)}
                  />
                )
              )}
            </div>
          </div>
          {selectedWebinar !== null && (
            <WebinarDetails 
              webinar={selectedWebinar}
            />
          )}
        </div>
      </div>
    </Layout>
  );
};

export default Help;
