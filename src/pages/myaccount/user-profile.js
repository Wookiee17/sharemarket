import Head from "next/head";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useRouter } from "next/router";
import * as Components from "../../common/assets/styles/Components";
import { useUserData } from "@nhost/nextjs";
import { gql, useMutation } from "@apollo/client";
import { useSignOut } from "@nhost/react";
import { setIsAuth } from "../../store/shield/ShieldSlice";
import { setUser } from "../../store/shield/ShieldSlice";
import { nhost } from "../../utils/nhost";
//Layout
import Layout from "../../common/layouts/Layout";
import { setActiveAccountTab } from "../../store/account/AccountSlice";
import { Upload } from "antd";
import { useQuery } from "@apollo/client";

// component
const UPDATE_USER_MUTATION = gql`
  mutation (
    $id: uuid!
    $displayName: String!
    $email: citext!
    $phoneNumber: String!
    $avatarUrl: String!
    $metadata: jsonb
  ) {
    updateUser(
      pk_columns: { id: $id }
      _set: {
        displayName: $displayName
        email: $email
        phoneNumber: $phoneNumber
        avatarUrl: $avatarUrl
        metadata: $metadata
      }
    ) {
      id
      displayName
      email
      phoneNumber
      metadata
      avatarUrl
    }
  }
`;

const UserProfilePage = () => {
  const { signOut } = useSignOut();
  const [mutateUser, { loading: updatingProfile, error, data }] =
    useMutation(UPDATE_USER_MUTATION);
  const userData = useUserData();
  const theme = useSelector((state) => state.Common.theme);
  const Tabs = useSelector((state) => state.Account.AccountTabs);
  const activeTab = useSelector((state) => state.Account.activeAccountTab);
  const [disabled, setDisabled] = useState(true);
  const router = useRouter();
  const dispatch = useDispatch();
  const [username, setUsername] = useState();
  const [email, setEmail] = useState();
  const [number, setNumber] = useState();
  const user = useSelector((state) => state.Shield.user);
  const [fileLink, setFileLink] = useState();
  const USER_QUERY = gql`
    query MyQuery($id: uuid!) {
      user(id: $id) {
        displayName
        email
        phoneNumber
        avatarUrl
        metadata
      }
    }
  `;

  const {
    loading: loadings,
    error: errors,
    data: datas,
    refetch,
  } = useQuery(USER_QUERY, {
    variables: { id: userData?.id },
    skip: !userData?.id,
    fetchPolicy: "no-cache",
  });

  useEffect(() => {
    if (datas?.user?.displayName) setUsername(datas?.user?.displayName);
    if (datas?.user?.email) setEmail(datas?.user?.email);
    if (datas?.user?.phoneNumber) setNumber(datas?.user?.phoneNumber);
    if (datas?.user?.avatarUrl) setFileLink(datas?.user?.avatarUrl);
  }, [datas?.user]);

  const updateUserProfile = async (event) => {
    setDisabled(!disabled);
    event.preventDefault(); // prevent default form submission behavior

    try {
      const result = await mutateUser({
        variables: {
          id: userData.id,
          displayName: `${username}`,
          email: `${email}`,
          phoneNumber: `${number}`,
          avatarUrl: `${fileLink}`,
          metadata: {
            username,
            email,
            number,
            fileLink,
          },
        },
      });
      setUsername(result?.data?.updateUser?.displayName);
      setEmail(result?.data?.updateUser?.email);
      setNumber(result?.data?.updateUser?.phoneNumber);
      dispatch(setUser(result?.data?.updateUser));
      console.log("succes", result);
    } catch (error) {
      console.log("error", error);
    }
  };

  const _changeTab = (id, slug) => {
    if (slug == "log-out") {
      signOut();
      dispatch(setIsAuth(false));
      dispatch(setActiveAccountTab(0));
      router.push("/authentication");
    } else {
      router.push(`/myaccount/${slug}`);
      dispatch(setActiveAccountTab(id));
    }
  };

  // console.log(fileLink, "link");

  const fileUploadProps = {
    beforeUpload: async (file) => {
      const link = await nhost.storage.upload({ file, bucketId: "public" });
      const links = await nhost.storage.getPublicUrl({
        fileId: link.fileMetadata.id,
      });
      setFileLink(links);
      refetch();
    },
  };

  return (
    <Layout>
      <div className={`tabs-body ${theme}`}>
        <Head>
          <title>Account | IC Trading</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className={`account ${theme}`}>
          <div className="account_left-tab">
            <div className="sidebar">
              {Tabs.map((item, i) => (
                <div
                  key={i}
                  className={`tabs ${activeTab == item.id && "active"}`}
                  onClick={() => {
                    _changeTab(item.id, item.slug);
                  }}
                >
                  <p>{item.name}</p>
                </div>
              ))}
            </div>
          </div>
          <div className={`account_right ${theme}`}>
            <Components.AccountContainer onSubmit={updateUserProfile}>
              <Components.ProfileForm>
                <Components.ProfileLogo
                  style={{
                    marginBottom: "1rem",
                    borderRadius: "50%",
                    border: "1px solid white",
                  }}
                  src={user?.avatarUrl}
                ></Components.ProfileLogo>
                {disabled ? null : (
                  <Upload
                    style={{ color: "skyblue" }}
                    {...fileUploadProps}
                    accept="image/*"
                  >
                    Upload
                  </Upload>
                )}

                <Components.Title>My Account</Components.Title>
                <Components.Input
                  type="text"
                  placeholder="Username"
                  disabled={disabled}
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                />
                <Components.Input
                  type="email"
                  placeholder="Email"
                  disabled={disabled}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
                <Components.Input
                  type="tel"
                  placeholder="PhoneNumber"
                  disabled={disabled}
                  value={number}
                  onChange={(e) => setNumber(e.target.value)}
                  required
                />

                <Components.GhostButton
                  style={{ marginTop: "1rem" }}
                  type={"submit"}
                  size={"lg"}
                >
                  {disabled ? "Edit Profile" : "Save Profile"}
                </Components.GhostButton>
              </Components.ProfileForm>
            </Components.AccountContainer>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default UserProfilePage;
